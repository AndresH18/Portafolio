@page "/projects"

@using Portfolio.Services

@inject RepositoryService RepositoryService
@inject IToastService ToastService

<PageTitle>Projects</PageTitle>

<h1>Projects</h1>

@if (!_repos.Any())
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <section class="container-fluid row">
        @foreach (var repo in _repos)
        {
            <article class="col mt-3 d-flex justify-content-center">
                <RepositoryCard Data=@repo/>
            </article>
        }
    </section>
    @* <div class="d-flex justify-content-center mt-5 mb-5"> *@
    @*     @if (Loading) *@
    @*     { *@
    @*         <div class="spinner-border" role="status"> *@
    @*             <span class="visually-hidden">Loading...</span> *@
    @*         </div> *@
    @*     } *@
    @*     else *@
    @*     { *@
    @*         <button class="btn btn-primary ps-4 pe-4" @onclick="LoadRepos">Load More</button> *@
    @*     } *@
    @* </div> *@
}

@code {

    private IEnumerable<RepositoryData> _repos = [];
    private bool _loading = true;
    private int _page = 1;

    private bool Loading => !_repos.Any() || _loading;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        RepositoryService.RepositoriesLoaded += OnRepositoriesLoaded;
        RepositoryService.RequestFailed += RepositoryService_OnRequestFailed;
    }

    private void OnRepositoriesLoaded(object? sender, IEnumerable<RepositoryData> e)
    {
        _repos = e;
    }

    private void RepositoryService_OnRequestFailed(object? sender, EventArgs e)
    {
        ToastService.ShowError("There is was an error with the GitHub API", settings => { settings.Timeout = 10; });
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await LoadRepos();
    }

    private async Task LoadRepos()
    {
        await IsLoadingFor(RepositoryService.LoadRepositories);
    }

    private async Task IsLoadingFor(Func<Task> unitOfWork)
    {
        _loading = true;

        try
        {
            await unitOfWork();
        }
        finally
        {
            _loading = false;
        }
    }

}

