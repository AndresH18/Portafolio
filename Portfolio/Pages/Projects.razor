@page "/projects"

@using Portfolio.Services

@inject RepositoryService Service

<PageTitle>Projects</PageTitle>

<h1>Projects</h1>

@if (!_repos.Any())
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <div class="row gy-3">
        @foreach (var repo in _repos)
        {
            <div class="col">
                <RepositoryCard Data=@repo/>
            </div>
        }
    </div>
    <div class="d-flex justify-content-center mt-5 mb-5">
        @if (Loading)
        {
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        }
        else
        {
            <button class="btn btn-primary ps-4 pe-4" @onclick="LoadRepos">Load More</button>
        }
    </div>
}

@code {

    private readonly List<RepositoryData> _repos = [];
    private bool _loading = true;
    private int _page = 1;

    private bool Loading => !_repos.Any() || _loading;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await LoadRepos();
    }

    private async Task LoadRepos()
    {
        await IsLoadingFor(async () =>
        {
            var r = await Service.GetRepositories(_page++);
            _repos.AddRange(r);
        });
    }

    private async Task IsLoadingFor(Func<Task> unitOfWork)
    {
        _loading = true;

        try
        {
            await unitOfWork();
        }
        finally
        {
            _loading = false;
        }
    }

}